include: resource://Neos.Fusion/Private/Fusion/Root.fusion

AE.History.HistoryController.index = Template {
	templatePath = 'resource://AE.History/Private/Templates/History/Index.html'
	eventsByDate = ${eventsByDate}
	nextPage = ${nextPage}
	sites = ${sites}
	site = ${site}
	accounts = ${accounts}
	account = ${account}
	to = ${to}
	from = ${from}
	node = ${node}
	firstEvent = ${firstEvent}

	eventRenderer = AE.History:History.EventRenderer
}

prototype(AE.History:History.EventRenderer) < prototype(Template) {
	templatePath = 'resource://AE.History/Private/Templates/History/Index.html'
	sectionName = 'eventElement'
	event = ${event}
	node = ${node}
	site = ${site}

	content = Array {
		@context.documentEvents = ${Neos.Array.filter(event.childEvents, 'documentEvent')}
		@context.contentEvents = ${Neos.Array.filterNegated(event.childEvents, 'documentEvent')}

		documentEvents = Collection {
			collection = ${documentEvents}
			itemName = 'subEvent'

			itemRenderer = Case {
				default {
					condition = TRUE
					type = ${'AE.History:History.PublishedNode.' + subEvent.eventType}
				}
			}
		}

		contentChanged = AE.History:History.PublishedNode.ContentChanged {
			event = ${event}
			@if.hasContentEvents = ${Array.length(contentEvents) > 0}
			@if.documentNotRemoved = ${documentEvents[0].eventType != 'Node.Removed'}
			@if.notDetailedView = ${node == null}
		}

		contentEvents = Collection {
			collection = ${contentEvents}
			itemName = 'subEvent'
			@if.detailedView = ${node != null}

			itemRenderer = Case {
				default {
					condition = TRUE
					type = ${'AE.History:History.PublishedNode.' + subEvent.eventType}
				}
			}
		}
	}
}

prototype(AE.History:History.PublishedNode.AbstractSubEvent) < prototype(Template) {
	templatePath = 'resource://AE.History/Private/Templates/History/Index.html'
	sectionName = 'subEventElement'

	event = ${subEvent}
	linkedNode = Template {
		templatePath = 'resource://AE.History/Private/Templates/History/NodeLink.html'
		event = ${event}
	}
	user = Template {
		templatePath = 'resource://AE.History/Private/Templates/History/User.html'
		event = ${event}
	}
}

prototype(AE.History:History.PublishedNode.Node.Adopt) < prototype(AE.History:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.adopted'
	descriptionTranslationArguments = ${[this.user, Neos.Rendering.renderDimensions(subEvent.data.targetDimensions), String.firstLetterToLowerCase(I18n.translate(Neos.Rendering.labelForNodeType(subEvent.data.nodeType))), this.linkedNode]}
}

prototype(AE.History:History.PublishedNode.Node.LabelChanged) < prototype(AE.History:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.renamed'
	descriptionTranslationArguments = ${[this.user, String.firstLetterToLowerCase(I18n.translate(Neos.Rendering.labelForNodeType(subEvent.data.nodeType))), subEvent.data.oldLabel, subEvent.data.newLabel]}
}

prototype(AE.History:History.PublishedNode.Node.Added) < prototype(AE.History:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.added'
	descriptionTranslationArguments = ${[this.user, String.firstLetterToLowerCase(I18n.translate(Neos.Rendering.labelForNodeType(subEvent.data.nodeType))), subEvent.data.nodeLabel]}
}

prototype(AE.History:History.PublishedNode.Node.Removed) < prototype(AE.History:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.removed'
	descriptionTranslationArguments = ${[this.user, String.firstLetterToLowerCase(I18n.translate(Neos.Rendering.labelForNodeType(subEvent.data.nodeType))), subEvent.data.nodeLabel]}
}

prototype(AE.History:History.PublishedNode.Node.Copy) < prototype(AE.History:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.copied'
	descriptionTranslationArguments = ${[this.user, String.firstLetterToLowerCase(I18n.translate(Neos.Rendering.labelForNodeType(subEvent.data.nodeType))), subEvent.data.nodeLabel]}
}

prototype(AE.History:History.PublishedNode.Node.Move) < prototype(AE.History:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.moved'
	descriptionTranslationArguments = ${[this.user, String.firstLetterToLowerCase(I18n.translate(Neos.Rendering.labelForNodeType(subEvent.data.nodeType))), subEvent.data.nodeLabel]}
}

prototype(AE.History:History.PublishedNode.Node.Updated) < prototype(AE.History:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.changed'
	descriptionTranslationArguments = ${[this.user, String.firstLetterToLowerCase(I18n.translate(Neos.Rendering.labelForNodeType(subEvent.data.nodeType))), subEvent.data.nodeLabel]}
}

prototype(AE.History:History.PublishedNode.ContentChanged) < prototype(AE.History:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.changedContent'
	descriptionTranslationArguments = ${[this.user, String.firstLetterToLowerCase(I18n.translate(Neos.Rendering.labelForNodeType(event.data.nodeType))), event.data.nodeLabel]}
}
